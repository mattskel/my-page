Can easily add react to an existing project by adding the script tags to the <body>
React is just a language used to describe a user interface. You dont need node to run react, however 

node is a popular platform to run a web server that can host react apps

You can initialise your project with node using npm init
If node has been installed globally, you wont see a node_modules folder

Building a react app from scratch

The publich directory will handle any static assets

Add babel. Babel compiles the code

Add Webpack. Webpack uses loaders to process different types of files for bundling.
To ustilise Webpack need to configure to use our loaders and prepare dev server.
Webpack configuration is in webpack.config.js
entry tells Webpack where our application starts
module defines how javascript modules are transformed according to the rules
output tells Webpack where to put bundled code 

React. ReactDOM.render is the function that tells React what to render and where to render it
Note to self: Might need to go back and fix the version numbers.

To start server run 
$webpack-dev-server --mode development
For some reason to add to the start script the command needs to be "webpack serve --mode development"

** Rendering Elements **
In practice most React apps only call ReactDOM.render() once.
React only updates when necessary. Only the node whose contects have changed gets updated.

** Componenets and props **
Components accecpt arbitrary inputs called props and return React elements describing what should appear.
Function and class componenets both have the same additional features.
Compartmentalising components into bite size peaces is easier to manage.
If part of your component is used several times, or is complex, it can be extracted to a component.
Props are read only. All react components must act like pure functions
